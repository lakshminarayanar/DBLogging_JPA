package com.hlb.dblogging.xml.utility;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.Charset;

import org.springframework.security.crypto.codec.Hex;

import com.hlb.dblogging.log.utility.ApplLogger;

public class EbcdicToAsciiConvertUtility {

	private static final int INITIAL_BUFFER_SIZE = 2048;
	private static final int LF = '\n';
	private static final int NEL = 0x15;
	private static final int WS = '?';
	static final Charset ebcdicCharset = Charset.forName("Cp1047");
	static final Charset outputCharset = Charset.defaultCharset();
	private static final char[] NON_PRINTABLE_EBCDIC_CHARS = new char[] {
		0x01, 0x02, 0x03, 0x9C,  0x86, 0x7F, 0x97, 0x8D, 0x8E, 0x0B,
		0x0C,  0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x9D, 0x85, 0x08,
		0x87, 0x18, 0x19, 0x92, 0x8F,   0x81,
		0x82, 0x83, 0x84,  0x1B, 0x88, 0x89, 0x8A, 0x8B, 0x8C,
		0x05, 0x06, 0x07, 0x90, 0x91, 0x16, 0x93, 0x94, 0x95, 0x96, 0x04,
		0x98, 0x99, 0x9A, 0x9B, 0x14, 0x15, 0x9E, 0x1A  };

	private int fixedLength = -1;
	
	public void setFixedLength(int numberOfColumn) {
		this.fixedLength = numberOfColumn;
	}
	
	// Testing String type.
	private static String EBCDIC_STRING="000008f55cc5c1c9f1404040404040404040404040404040f0f0f0f0f0f0f0f0f0f0f040f0f2f1f3f0f0f1f2f3f7f0f0f0f55cc4e2d7c1c2c3e24040404040405cc5c1c9f14040404040c2c2c8e3d3d9e3c54040f0f0404040404040404040404040f0f0f0f0f0f0f0f0f0f0f0f0f04040404040404040404040404040404040404040c2c2c8e3d3d4d6d5c5e8c6d5c34040404040404040404040404040404040404040404040404040404040d4f1f8f0f9f3f1f3f7f8f5f7f0f0f0f0f0f0f0f0f0f0f0f0404040404040404040404040404040404040404040404040404040404040f0404040404040404040404040404040404040404040000010205cd4d6e2c140404040404040404040404040404040404040404040404040f0f0f0f0f040404040404040404040000000000cf0f0f0f0f0f0e3f9f9f9f9404040404040404040f0f3f3f1404040404040000000001fd5000000000cf5f0f1f0404040404040f1f0f1f0f1f5f0f0f0f0f0f0f1f140404040404040404040404040404040404040404040404040f0f0f0f0f0f0f0f1d5d5d5d5d5d5d50000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000001f0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000c0000000000000000000cd4e8d9400000000000000000000c4040404040404040404040f6f0f1f2f1f960f1f060f6f3f7f340404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040f04040404040404040404040404040404040404040404040404040404040404040404040404040400c0000000000000000000c00000cf0000cf0000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c40f000000c
	private int[] loadContent(Reader reader) throws IOException {
		int[] buffer = new int[INITIAL_BUFFER_SIZE];
		int bufferIndex = 0;
		int bufferSize = buffer.length;
		int character;
		while ((character = reader.read()) != -1) {
			if (bufferIndex == bufferSize) {
				buffer = resizeArray(buffer, bufferSize + INITIAL_BUFFER_SIZE);
				bufferSize = buffer.length;
			}
			buffer[bufferIndex++] = character;
		}
		return resizeArray(buffer, bufferIndex);
	}

	public String convert(String ebcdicInputString) {
		Reader reader = null;
		StringBuffer convertedOutputString = new StringBuffer();
		try {
			reader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(ebcdicInputString.getBytes("windows-1252")),"Cp1047"));
			int[] ebcdicInput = loadContent(reader);
			return	convert(ebcdicInput, convertedOutputString);
		} catch (Exception e) {
			ApplLogger.getLogger().error("Error caught while converting to ASCII", e);
		} 
		return convertedOutputString.toString();
	}

	
	final int[] resizeArray(int[] orignalArray, int newSize) {
		int[] resizedArray = new int[newSize];
		for (int i = 0; i < newSize && i < orignalArray.length; i++) {
			resizedArray[i] = orignalArray[i];
		}
		return resizedArray;
	}

		int convertedChar;
		private String convert(int[] ebcdicInput, StringBuffer convertedOutputWriter) throws IOException {
		for (int index = 0; index < ebcdicInput.length; index++) {
			int character = ebcdicInput[index];
			if (fixedLength != -1 && index > 0 && index % fixedLength == 0) {
				convertedOutputWriter.append((char) LF);
			}
			if (fixedLength == -1 && character == NEL) {
				convertedChar = LF;
			} else {
				//convertedChar = character;
				// Commented this line due to Lau want to see the special characters as well
				convertedChar = replaceNonPrintableCharacterByWhitespace(character);
			}
			convertedOutputWriter.append((char) convertedChar);
		}
		ApplLogger.getLogger().info("Output ASCII data is : "+convertedOutputWriter);
		return convertedOutputWriter.toString();
	}

	private int replaceNonPrintableCharacterByWhitespace(int character) {
		for (char nonPrintableChar : NON_PRINTABLE_EBCDIC_CHARS) {
			if (nonPrintableChar == (char) character) {
				return WS;
			}
		}
		return character;
	}

	private static String hexToCharacter(String hexValue)
	   {
	      StringBuilder output = new StringBuilder("");
	      for (int i = 0; i < hexValue.length(); i += 2)
	      {
	         String str = hexValue.substring(i, i + 2);
	         output.append((char) Integer.parseInt(str, 16));
	      }
	      return output.toString();
	   }

	  public static void main(String[] args) {
		  try{
		  // File source = new File("C:\\Users\\Lakshminarayana\\Downloads\\EBCDIC\\EBCDIC.txt");
		  // File destination = new File("C:\\Users\\Lakshminarayana\\Downloads\\ASCII\\ASCII.txt");
		  new EbcdicToAsciiConvertUtility().convert(hexToCharacter(EBCDIC_STRING));
		  ApplLogger.getLogger().info("Successfully Converted...!!!");
		  }catch(Exception e){
			  e.printStackTrace();
		  }
	  }
	
}
